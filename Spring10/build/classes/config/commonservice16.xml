<?xml version="1.0" encoding="UTF-8" ?>

<beans 	xmlns="http://www.springframework.org/schema/beans"
		xmlns:context="http://www.springframework.org/schema/context"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:aop="http://www.springframework.org/schema/aop"
		xmlns:tx="http://www.springframework.org/schema/tx"
		xsi:schemaLocation="http://www.springframework.org/schema/beans
							http://www.springframework.org/schema/beans/spring-beans.xsd
							
							http://www.springframework.org/schema/context
							http://www.springframework.org/schema/context/spring-context.xsd
							
							http://www.springframework.org/schema/aop
							http://www.springframework.org/schema/aop/spring-aop.xsd
							
							http://www.springframework.org/schema/tx
							http://www.springframework.org/schema/tx/spring-tx.xsd">

<!-- PropertyPlaceholderConfigurer로 로드된 resource는 ${}로 접근 가능 -->
<bean id="propertyConfigurer"
	  class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
	  <property name="location" value="classpath:config/jdbc.properties" />
</bean>

<!-- DBCP 사용 (apache 제공) -->
<bean id="dataSource"
	  class="org.apache.commons.dbcp.BasicDataSource">
	<property name="driverClassName" value="${jdbc.driverClassName}"/>
	<property name="url" value="${jdbc.url}"/>	 
	<property name="username" value="${jdbc.username}"/>	 
	<property name="password" value="${jdbc.password}"/>	 
	<property name="initialSize" value="${jdbc.initialSize}"/>
	<property name="maxActive" value="${jdbc.maxActive}"/>	 	  
</bean>

<!-- SqlSessionFactory 생성 -->
<bean id="sqlSessionFactoryBean"
	  class="org.mybatis.spring.SqlSessionFactoryBean">
	<property name="dataSource" ref="dataSource"/>
	<property name="configLocation" value="classpath:sql/mybatis-config13.xml"/>	  
</bean>

<!-- SqlSessionTeamplate 인스턴스 생성 -->
<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
	<constructor-arg ref="sqlSessionFactoryBean"/>
</bean>

<!-- 어노테이션 기반 :: Spring Framework 사용 -->
<context:component-scan base-package="mybatis.service.user.impl"/>

<!-- AOP 적용 : LOG를 처리하는 Aspect 선언 -->
<!-- 1. 일반 Bean Definition :: POJO 기반 -->
<bean id="pojoAspect" class="mybatis.service.PojoAspectJ"/>

<!-- 2. 선언적으로 Point cut / Advice 정의 -->
	<aop:config>
		<aop:aspect ref="pojoAspect">
			<aop:around pointcut="execution(* mybatis.service.user..*impl*.*(..))" method="invoke"/>
		</aop:aspect>
	</aop:config>
	
	
	<!-- TransactionManager instance 생성 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>
	
	<!-- Transaction Advice 생성 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="get*" propagation="REQUIRED" read-only="true" />
			<tx:method name="add*"/>
			<!-- 모든 Method에 적용 transaction 규칙 -->
			<!-- <tx:method name="*"/> -->
		</tx:attributes>
	</tx:advice>
	
	<!-- AOP : pointcut / advisor 설정 -->
	<aop:config>
		<aop:pointcut id="requiredTx" expression="execution(* mybatis.service.user..*ServiceImpl*.*(..))"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="requiredTx"/>
	</aop:config>
	
</beans>